name: PHP Tests

on:
  pull_request:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    name: PHP 8.2 Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        php-versions: ['8.2']

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_db
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: mbstring, intl, json, mysql, xml
          coverage: xdebug
          tools: composer, phpunit

      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install dependencies
        run: composer install --no-progress

      - name: Copy environment file
        run: |
          cp .env-sample .env
          # Explicitly set the base URL for testing
          echo "app.baseURL = 'http://localhost:8080/'" >> .env

      - name: Configure database for tests
        run: |
          echo "database.tests.hostname = 127.0.0.1" >> .env
          echo "database.tests.database = test_db" >> .env
          echo "database.tests.username = root" >> .env
          echo "database.tests.password = root" >> .env

      - name: Create modern PHPUnit configuration
        run: |
          mkdir -p build/logs

          # Create a modern phpunit.xml configuration that works with PHPUnit 11
          echo '<?xml version="1.0" encoding="UTF-8"?>
          <phpunit xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  bootstrap="vendor/codeigniter4/framework/system/Test/bootstrap.php"
                  colors="true"
                  stopOnError="false"
                  stopOnFailure="false"
                  stopOnIncomplete="false"
                  stopOnSkipped="false"
                  xsi:noNamespaceSchemaLocation="https://schema.phpunit.de/11.0/phpunit.xsd">
            <testsuites>
              <testsuite name="App">
                <directory>./tests</directory>
              </testsuite>
            </testsuites>
            <source>
              <include>
                <directory suffix=".php">./app</directory>
              </include>
              <exclude>
                <directory suffix=".php">./app/Views</directory>
                <file>./app/Config/Routes.php</file>
              </exclude>
            </source>
            <php>
              <server name="app.baseURL" value="http://localhost:8080"/>
              <const name="HOMEPATH" value="./"/>
              <const name="CONFIGPATH" value="./app/Config/"/>
              <const name="PUBLICPATH" value="./public/"/>
            </php>
          </phpunit>' > phpunit.xml

      - name: Check for other unit tests
        id: unit-tests
        run: |
          # Check if any other unit tests exist
          if [ -d "tests/unit" ] && [ "$(find tests/unit -name '*Test.php' | grep -v 'HealthTest.php' | wc -l)" -gt 0 ]; then
            echo "has_unit_tests=true" >> $GITHUB_OUTPUT
          else
            echo "has_unit_tests=false" >> $GITHUB_OUTPUT
            echo "No additional unit tests found besides HealthTest.php"
          fi

      - name: Run other unit tests
        if: steps.unit-tests.outputs.has_unit_tests == 'true'
        run: |
          vendor/bin/phpunit --testsuite "App" --filter "unit" --exclude-group database

      - name: Run other unit tests
        if: steps.unit-tests.outputs.has_unit_tests == 'true'
        run: |
          vendor/bin/phpunit --testsuite "App" --filter "unit" --exclude-group database

      - name: Generate coverage report
        run: |
          mkdir -p build/logs
          vendor/bin/phpunit --coverage-clover build/logs/clover.xml tests/unit/HealthTest.php

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-php-8.2
          path: build/logs
          retention-days: 7

      - name: Upload coverage to Codecov
        if: always()
        uses: codecov/codecov-action@v5
        with:
          file: ./build/logs/clover.xml
          fail_ci_if_error: false