name: Create Release Tag

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version increment type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      tag_message:
        description: 'Tag message (optional)'
        required: false
        default: ''
        type: string

jobs:
  create-tag:
    name: Create Version Tag
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for tags
          
      - name: Generate version tag
        id: version
        run: |
          # Get the latest semantic version tag (v*.*.* format)
          LATEST_TAG=$(git tag -l 'v[0-9]*.[0-9]*.[0-9]*' | sort -V | tail -n1 || echo "v0.0.0")
          
          # If no semantic version tags exist, use v0.0.0
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="v0.0.0"
          fi
          
          echo "Latest tag: $LATEST_TAG"
          
          # Extract version numbers
          VERSION=${LATEST_TAG#v}
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          PATCH=$(echo $VERSION | cut -d. -f3)
          
          # Increment based on input
          case "${{ github.event.inputs.version_type }}" in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_TAG="v${MAJOR}.${MINOR}.${PATCH}"
          
          echo "New tag: $NEW_TAG"
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "new_version=${MAJOR}.${MINOR}.${PATCH}" >> $GITHUB_OUTPUT
          
      - name: Extract recent changes
        id: changes
        run: |
          # Get commits since last tag
          LATEST_TAG=$(git tag -l 'v[0-9]*.[0-9]*.[0-9]*' | sort -V | tail -n1 || echo "")
          
          if [ -n "$LATEST_TAG" ]; then
            echo "Getting changes since $LATEST_TAG"
            
            # Get list of PRs merged since last tag
            CHANGES=""
            while IFS= read -r commit; do
              PR_NUM=$(echo "$commit" | grep -oE '#[0-9]+' | tr -d '#' | head -1)
              if [ -n "$PR_NUM" ]; then
                CHANGES="${CHANGES}- ${commit}\n"
              fi
            done <<< "$(git log --pretty=format:"%s" ${LATEST_TAG}..HEAD)"
            
            echo "changes<<EOF" >> $GITHUB_OUTPUT
            echo -e "$CHANGES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi
      - name: Create and push tag
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # Create tag message
          TAG_MESSAGE="Release ${{ steps.version.outputs.new_tag }}"
          
          if [ -n "${{ github.event.inputs.tag_message }}" ]; then
            TAG_MESSAGE="${TAG_MESSAGE}

${{ github.event.inputs.tag_message }}"
          fi
          
          # Add recent changes if available
          if [ -n "${{ steps.changes.outputs.changes }}" ]; then
            TAG_MESSAGE="${TAG_MESSAGE}

Changes included:
${{ steps.changes.outputs.changes }}"
          fi
          
          echo "$TAG_MESSAGE" > .tag_message
          git tag -a ${{ steps.version.outputs.new_tag }} -F .tag_message
          git push origin ${{ steps.version.outputs.new_tag }}
          rm -f .tag_message
          
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.new_tag }}
          release_name: Release ${{ steps.version.outputs.new_tag }}
          body: |
            Release ${{ steps.version.outputs.new_tag }}
            
            ${{ github.event.inputs.tag_message }}
            
            ## Changes included:
            ${{ steps.changes.outputs.changes }}
          draft: false
          prerelease: false